# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  projects(relativePath: String): Projects!
  projectsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ProjectsFilter): ProjectsConnection!
}

input DocumentFilter {
  projects: ProjectsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Projects | Folder

type ProjectsProjectImages {
  src: String
  altText: String
}

type Projects implements Node & Document {
  title: String!
  overview: String!
  tools: [String]
  summary: JSON
  tags: [String]
  projectImages: [ProjectsProjectImages]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input ProjectsProjectImagesFilter {
  src: ImageFilter
  altText: StringFilter
}

input ProjectsFilter {
  title: StringFilter
  overview: StringFilter
  tools: StringFilter
  summary: RichTextFilter
  tags: StringFilter
  projectImages: ProjectsProjectImagesFilter
}

type ProjectsConnectionEdges {
  cursor: String!
  node: Projects
}

type ProjectsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ProjectsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateProjects(relativePath: String!, params: ProjectsMutation!): Projects!
  createProjects(relativePath: String!, params: ProjectsMutation!): Projects!
}

input DocumentUpdateMutation {
  projects: ProjectsMutation
  relativePath: String
}

input DocumentMutation {
  projects: ProjectsMutation
}

input ProjectsProjectImagesMutation {
  src: String
  altText: String
}

input ProjectsMutation {
  title: String
  overview: String
  tools: [String]
  summary: JSON
  tags: [String]
  projectImages: [ProjectsProjectImagesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
